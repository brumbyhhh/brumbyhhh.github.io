<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>In Search of an Understandable Consensus Algorithm</title>
      <link href="/2023/09/15/In-Search-of-an-Understandable-Consensus-Algorithm/"/>
      <url>/2023/09/15/In-Search-of-an-Understandable-Consensus-Algorithm/</url>
      
        <content type="html"><![CDATA[<p>raft</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度剖析 Zookeeper</title>
      <link href="/2023/09/15/%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90-Zookeeper/"/>
      <url>/2023/09/15/%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90-Zookeeper/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Paxos 算法</title>
      <link href="/2023/09/15/Paxos-%E7%AE%97%E6%B3%95/"/>
      <url>/2023/09/15/Paxos-%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入分布式</title>
      <link href="/2023/09/15/%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F/"/>
      <url>/2023/09/15/%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何封装自己的 react UI 组件库（Button）</title>
      <link href="/2023/09/11/%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84-react-UI-%E7%BB%84%E4%BB%B6%E5%BA%93%EF%BC%88Button%EF%BC%89/"/>
      <url>/2023/09/11/%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84-react-UI-%E7%BB%84%E4%BB%B6%E5%BA%93%EF%BC%88Button%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Button-按钮的实现"><a href="#Button-按钮的实现" class="headerlink" title="Button 按钮的实现"></a>Button 按钮的实现</h1><ul><li><p>实现思路很简单，就是将 html 的 Button 加上一些 css 样式，并让使用者可以传入 Button 的类型，例如 ghost 类型。</p><ul><li><p>Button.tsx 文件</p><ul><li>定义 Button 的一些属性</li></ul><pre><code class="typescript">interface ButtonProps &#123;  onClick?: () =&gt; void;  style?: React.CSSProperties;  variant?: &quot;default&quot; | &quot;dashed&quot; | &quot;outline&quot; | &quot;ghost&quot;;  children: React.ReactNode;&#125;</code></pre><ul><li>渲染 Button 组件</li></ul><pre><code class="typescript">const Button: React.FC&lt;ButtonProps&gt; = (&#123;  onClick,  style,  variant = &quot;default&quot;,  children,&#125;) =&gt; &#123;  return (    &lt;button className=&#123;`button $&#123;variant&#125;`&#125; onClick=&#123;onClick&#125; style=&#123;style&#125;&gt;      &#123;children&#125;    &lt;/button&gt;  );&#125;;export default Button;</code></pre></li><li><p>引入 CSS 样式</p><ul><li>Button.css 文件</li></ul><pre><code class="css">/* 默认样式 */.button &#123;  background-color: #0967cc;  color: white;  border: none;  padding: 10px 20px;  cursor: pointer;&#125;/* 虚线框样式 */.button.dashed &#123;  border: 1px dashed #0967cc;  background-color: transparent;  color: #007bff;&#125;/* 无框样式 */.button.outline &#123;  border: 1px solid #0967cc;  background-color: transparent;  color: #007bff;&#125;/* 幽灵样式 */.button.ghost &#123;  background-color: transparent;  color: #007bff;&#125;/* 鼠标悬停时的样式 */.button:hover &#123;  background-color: #0056b3;  border-color: #0056b3;&#125;/* 点击时的样式 */.button:active &#123;  background-color: #007bff;  border-color: #003d80;&#125;/* 获取焦点时的样式 */.button:focus &#123;  outline: none;  box-shadow: 0 0 4px rgba(0, 123, 255, 0.5);&#125;</code></pre></li></ul></li></ul><h1 id="Button-的使用"><a href="#Button-的使用" class="headerlink" title="Button 的使用"></a>Button 的使用</h1><ul><li>我们的 Button 已经封装好了，在项目中可以使用我们自己封装的 Button 组件</li></ul><pre><code class="tsx">import &#123; Button &#125; from &quot;../../wanwu-ui/src/index&quot;;function App() &#123;  return (    &lt;&gt;      &lt;div&gt;        &lt;Button variant=&quot;outline&quot; onClick=&#123;() =&gt; alert(&quot;点击按钮&quot;)&#125;&gt;&lt;/Button&gt;      &lt;/div&gt;    &lt;/&gt;  );&#125;export default App;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何封装自己的 react UI 组件库（搭建环境）</title>
      <link href="/2023/09/09/%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84-react-UI-%E7%BB%84%E4%BB%B6%E5%BA%93%EF%BC%88%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%EF%BC%89/"/>
      <url>/2023/09/09/%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84-react-UI-%E7%BB%84%E4%BB%B6%E5%BA%93%EF%BC%88%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="创建-monorepo-项目，发布组件的步骤"><a href="#创建-monorepo-项目，发布组件的步骤" class="headerlink" title="创建 monorepo 项目，发布组件的步骤"></a>创建 monorepo 项目，发布组件的步骤</h1><ul><li>先创建一个项目<pre><code class="bash">mkdir wanwu-ui-projectcd wanwu-ui-projectvim pnpm.workspace.yml # 需要创建 pnpm.workspace.yml 才能使用 pnpm init -w 对项目进行初始化pnpm init -wmkdir packages # 存放子项目的地方cd packagesmkdir wanwu-ui # 创建存放封装 ui 组件的项目cd wanwu-uipnpm initnpx tsc --init # 创建 typescript 配置文件pnpm add --save-dev typescript @types/node # 安装 typescript 相关的依赖pnpm add react react-dom</code></pre></li><li>为了能用 ts 编写组件，所以需要更改一些配置<ol><li>首先在 <code>tsconfig.json</code> 中指定 ts 文件编译之后的输出目录</li></ol><pre><code class="json">&#123;  &quot;compilerOptions&quot;: &#123;    &quot;outDir&quot;: &quot;./dist&quot;, // 指定编译后的输出目录    &quot;module&quot;: &quot;esnext&quot;, // 使用 ES 模块规范    &quot;moduleResolution&quot;: &quot;node&quot;,    &quot;jsx&quot;: &quot;react&quot;,    // 下面两个配置是为了确保模块导入的兼容性，通常适用于 CSS 模块化    &quot;esModuleInterop&quot;: true,    &quot;allowSyntheticDefaultImports&quot;: true,  &#125;,  &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.scss&quot;],  &quot;exclude&quot;: [&quot;node_modules&quot;]&#125;</code></pre><ol start="2"><li>这一步是在你编写完组件后才执行，使用 <code>npx tsc</code> 编译 ts 代码</li><li>创建 npm 包，需要对子项目 wanwu-ui 目录下的 <code>package.json</code> 进行一些修改</li></ol><pre><code class="json">&#123;  &quot;name&quot;: &quot;wanwu-ui&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;main&quot;: &quot;dist/index.js&quot;, // 主入口文件  &quot;module&quot;: &quot;dist/index.js&quot;, // ES 模块入口文件  &quot;description&quot;: &quot;... some description&quot;&#125;</code></pre></li><li>发布到 npm<ul><li><code>pnpm publish</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>monorepo 架构和 turborepo 项目管理</title>
      <link href="/2023/09/08/monorepo-%E6%9E%B6%E6%9E%84%E5%92%8C-turborepo-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
      <url>/2023/09/08/monorepo-%E6%9E%B6%E6%9E%84%E5%92%8C-turborepo-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="monorepo-架构"><a href="#monorepo-架构" class="headerlink" title="monorepo 架构"></a>monorepo 架构</h1><h2 id="什么是-monorepo-架构"><a href="#什么是-monorepo-架构" class="headerlink" title="什么是 monorepo 架构"></a>什么是 monorepo 架构</h2><ul><li>monorepo（单一代码仓库） 架构是一种软件开发架构，其中一个项目将多个相关的项目或库，存储在一个单一的代码仓库中，而不是将它们分割成多个独立的代码仓库。</li><li>这个架构的主要思想就是将所有的项目代码和相关资源集中管理，以提高开发效率、协作性和代码共享。</li></ul><h2 id="monorepo-的优缺点"><a href="#monorepo-的优缺点" class="headerlink" title="monorepo 的优缺点"></a>monorepo 的优缺点</h2><ul><li><strong>优点</strong>：<ul><li><strong>代码共享和重用</strong>：不同的项目之间可以更轻松的共享代码和模块，可以降低测试成本，提高代码的可维护性。</li><li><strong>统一的构建和部署流程</strong>：所有的项目使用相同的构建工具和流程，使构建、测试和部署更加一致和可控。</li><li><strong>更好的协作和可见性</strong>：开发团队可以更容易地查看和协作其他项目的代码，因为它们都存放在同一个仓库，不需要切换多个仓库。</li><li><strong>版本管理和依赖管理</strong>：版本控制和依赖管理在 monorepo 中更加简化，因为所有项目都受到相同的版本管理策略的约束，可以减少版本冲突。<ul><li><strong>什么是相同的版本管理策略？</strong><ul><li><strong>共享版本号</strong>：所有项目的版本号都是统一的，就是说你在一个项目中进行了版本号的更改，其他项目的版本号也会更改，这确保了所有项目在同一个版本号下工作。</li><li><strong>共享依赖管理</strong>：monorepo 的所有项目通常会共享相同的依赖管理机制。这意味着它们可能使用相同的依赖管理工具（如 pnpm 或 yarn），并共享依赖项的版本信息，这有助于减少版本冲突，确保依赖项的一致性。</li><li><strong>版本发布和部署协调</strong>：在 monorepo 中，版本发布和部署通常是协调的。这意味着当一个项目升级到新版本时，可能需要确保其他项目也能够适应这个新版本，以避免不兼容或错误。</li></ul></li></ul></li><li><strong>更容易重构和代码重组</strong>：因为所有代码都在同一个仓库中，因此更容易进行大规模的重构或重新组织代码。</li><li><strong>更快的构建和测试</strong>：monorepo 可以充分的利用缓存和共享依赖，因此在构建和测试方面都能更高效。</li></ul></li><li><strong>缺点</strong>：<ul><li><strong>复杂性增加</strong>：将多个项目或库存储在一个单一的代码仓库中可能会增加仓库的复杂性。大型 monorepo 可能会变得难以管理，特别是团队中有多个开发人员同时提交更改时。</li><li><strong>构建和部署时间延长</strong>：如果 monorepo 包含大量的项目或库，构建和部署整个仓库可能会变得非常耗时，尤其是在 CI&#x2F;CD 流程中。</li><li><strong>难以维护权限和访问控制</strong>：在 monorepo 中实施细粒度的权限和访问控制可能变得很复杂，有时需要额外的工作来确保只有特定项目的开发人员能够访问或修改代码。</li><li><strong>依赖冲突</strong>：在某些情况下，monorepo 也可能会产生依赖冲突，比如 monorepo 的两个项目中一个项目需要较新的依赖，另一个老项目中需要较老的依赖，这种情况就会依赖冲突。解决方法就是定期进行测试和构建，以确保所有的项目与其依赖项保持兼容。</li><li><strong>团队协作问题</strong>：monorepo 可能需要更多的团队协作和沟通，以确保不同项目之间的变更不会冲突或破坏其他部分代码。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏感词过滤如何实现</title>
      <link href="/2023/09/08/%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/09/08/%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="实现敏感词过滤的步骤"><a href="#实现敏感词过滤的步骤" class="headerlink" title="实现敏感词过滤的步骤"></a>实现敏感词过滤的步骤</h1><ul><li><strong>构建敏感词汇列表</strong>：首先你需要创建一个敏感词汇的列表或词库，表示不当内容。</li><li><strong>选择过滤方法</strong>:<ul><li><strong>关键词匹配</strong>：使用字符串匹配算法，检查文本中是否包含敏感词汇，这是最简单的方法，但不适用于复杂的敏感词汇。</li><li><strong>正则表达式</strong>：使用正则表达式来匹配敏感词汇，这允许更灵活的匹配模式。</li><li><strong>Tire 树</strong>：构建一个 Trie 树，将敏感词汇插入树中，并通过树的遍历来检查文本。</li><li><strong>机器学习</strong>：使用自然语言 NPL 和机器学习技术训练模型，以检测和过滤不当的内容。</li></ul></li><li><strong>过滤文本</strong>：将要过滤的文本传递给你选择的过滤方法，检查是否包含敏感词汇。</li><li><strong>替换或删除敏感词汇</strong>：如果文本中包含敏感词汇，你可以选择替换敏感词汇，将其标记为占位符或完全删除，具体取决于你的需求。</li><li><strong>性能优化</strong>：如果对于大量文本的处理，你需要考虑性能，可以使用一些技巧提高过滤速度，例如缓存已处理的文本、使用多线程或并行处理等。</li><li><strong>维护词库</strong>：定期更新敏感词汇列表以反映新的敏感内容。可以手动更新，也可以自动从可信来源获取。</li></ul><h1 id="过滤的方法"><a href="#过滤的方法" class="headerlink" title="过滤的方法"></a>过滤的方法</h1><p>选择过滤的方法，是实现敏感词过滤的关键，如何实现这个过滤方法呢？这篇文章主要使用前缀树来实现敏感词过滤的功能。我先来介绍一下什么是前缀树？</p><h2 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h2><ul><li><p><strong>什么是前缀树？</strong></p><ul><li>通常是用于存储和检索字符串集合中的字符串，它是一种用于快速查找和匹配前缀的数据结构，因此称为前缀树。</li><li><strong>前缀树的特点</strong><ol><li><strong>树状结构</strong>：前缀树是一个树，其中每个节点代表一个字符，从根节点开始到叶子节点的路径组合在一起形成一个字符串。根节点不包括字符，每个子节点表示一个字符。</li><li><strong>前缀匹配</strong>：前缀树主要用途是查找具有特定前缀的字符串。通过从根节点开始，沿着树的路径移动，可以逐个字符地匹配输入的前缀，直到找到相应的节点或者确定前缀不存在。</li><li><strong>高效的查找</strong>：因为前缀树将相同的前缀的字符串共享相同的前缀路径，因此它非常适合存储大量的字符串，并且可以在常数时间内查找、插入和删除字符串。</li><li><strong>空间消耗</strong>：前缀树的主要缺点是它可能占用大量的内存，特别是当字符串集合中的字符串共享大量前缀时，为了减少内存占用，可以使用压缩前缀树（如压缩字典或基数树）</li></ol></li></ul></li><li><p><strong>如何实现前缀树？</strong></p><ul><li><p><strong>定义节点结构</strong></p><ul><li><code>children</code>：一个映射或数组，用于存储子节点，其中键或索引对应于字符串或字符集</li><li><code>isEnd</code>：一个布尔值，指示当前节点是否代表一个字符串的结尾。</li></ul><pre><code class="golang">// TrieNode 表示前缀树的节点type TrieNode struct &#123;    children map[rune]*TrieNode    isEnd bool&#125;// Trie 表示前缀树type Trie struct &#123;&#125;// NewTrie 创建一个新的前缀树func NewTrie() *Trie &#123;    return &amp;Trie &#123;        root: &amp;TrieNode &#123;            children: make(map[rune]*TrieNode),            isEnd: false        &#125;,    &#125;&#125;</code></pre></li><li><p><strong>插入操作</strong></p><ul><li>实现插入操作以将字符串添加到前缀树中<ul><li>从根节点开始，遍历要插入的字符串的字符。</li><li>对于每个字符，检查它是否已经作为子节点的存在，如果不存在，则创建一个新节点并将其添加到当前节点的子节点映射或数组中。</li><li>移动到下一个节点，并继续这个过程，直到插入完整字符串。</li><li>在插入的最后一个字符节点上设置 <code>isEnd</code> 标志，表示一个完整的字符串已经插入。</li></ul></li></ul><pre><code class="golang">// 向前缀树中插入一个字符串func (t *Trie) Insert(word string) &#123;    node := t.root    for _, char := range word &#123;        if node.children[char] == nil &#123;            node.children[char] = &amp;TrieNode&#123;                children: make(map[rune]*TrieNode),                isEnd: false,            &#125;        &#125;        node = node.children[char]    &#125;    node.isEnd = true&#125;</code></pre></li><li><p><strong>搜索操作</strong></p><ul><li>实现搜索操作以查找前缀或整个字符串<ul><li>从根节点开始，遍历要搜索的字符串的字符。</li><li>对于每个字符，检查它是否作为子节点存在。如果存在，继续向下移动。</li><li>如果在搜索的过程中遇到任何字符节点不存在，或者搜索完成后发现当前节点的 <code>isEnd</code> 标志未设置，那么表示该字符串不存在于前缀树中。</li></ul></li></ul><pre><code class="golang">// 搜索前缀树以检查字符串是否存在func (t *Trie) Search(word string) bool &#123;    node := t.root    for _, char := range word &#123;        if node.children[char] == nil &#123;            return false        &#125;        node = node.children[char]    &#125;    return node.isEnd&#125;</code></pre></li><li><p><strong>完整实现</strong></p><ul><li>golang 实现</li></ul><pre><code class="golang">package mainimport &quot;fmt&quot;// TrieNode 表示前缀树的节点type TrieNode struct &#123;    children map[rune]*TrieNode    isEnd    bool&#125;// Trie 表示前缀树type Trie struct &#123;    root *TrieNode&#125;// NewTrie 创建一个新的前缀树func NewTrie() *Trie &#123;    return &amp;Trie&#123;        root: &amp;TrieNode&#123;            children: make(map[rune]*TrieNode),            isEnd:    false,        &#125;,    &#125;&#125;// Insert 向前缀树中插入一个字符串func (t *Trie) Insert(word string) &#123;    node := t.root    for _, char := range word &#123;        if node.children[char] == nil &#123;            node.children[char] = &amp;TrieNode&#123;                children: make(map[rune]*TrieNode),                isEnd:    false,            &#125;        &#125;        node = node.children[char]    &#125;    node.isEnd = true&#125;// Search 搜索前缀树以检查字符串是否存在func (t *Trie) Search(word string) bool &#123;    node := t.root    for _, char := range word &#123;        if node.children[char] == nil &#123;            return false        &#125;        node = node.children[char]    &#125;    return node.isEnd&#125;func main() &#123;    trie := NewTrie()    trie.Insert(&quot;apple&quot;)    trie.Insert(&quot;app&quot;)    trie.Insert(&quot;banana&quot;)    fmt.Println(trie.Search(&quot;apple&quot;))   // true    fmt.Println(trie.Search(&quot;app&quot;))     // true    fmt.Println(trie.Search(&quot;banana&quot;))  // true    fmt.Println(trie.Search(&quot;orange&quot;))  // false    fmt.Println(trie.Search(&quot;apples&quot;))  // false&#125;</code></pre></li><li><p>Java 实现</p></li></ul><pre><code class="java">import java.util.HashMap;import java.util.Map;class TrieNode &#123;  Map&lt;Character, TrieNode&gt; children;  boolean isEnd;  public TrieNode() &#123;      this.children = new HashMap&lt;&gt;();      this.isEnd = false;  &#125;&#125;class Trie &#123;  TrieNode root;  public Trie() &#123;      this.root = new TriredNode();  &#125;  public void insert(String word) &#123;      TrieNode node = this.root;      for (char c : word.toCharArray()) &#123;          if (!node.children.containsKey(c)) &#123;              node.children.put(c, new TrieNode());          &#125;          node = node.children.get(c);      &#125;      node.isEnd = true;  &#125;  public void search(String word) &#123;      TrieNode node = this.root;      for (char c : word.toCharArray()) &#123;          if (!node.children.containsKey(c)) &#123;              return false;          &#125;          node = node.children.get(c);      &#125;      return node.isEnd;  &#125;&#125;public class Main &#123;  public static void main(String[] args) &#123;      Trie trie = new Trie();      trie.insert(&quot;apple&quot;);      trie.insert(&quot;app&quot;);      trie.insert(&quot;banana&quot;);      System.out.println(trie.search(&quot;apple&quot;));   // true      System.out.println(trie.search(&quot;app&quot;));     // true      System.out.println(trie.search(&quot;banana&quot;));  // true      System.out.println(trie.search(&quot;orange&quot;));  // false      System.out.println(trie.search(&quot;apples&quot;));  // false  &#125;&#125;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raft 算法</title>
      <link href="/2023/09/07/Raft-%E7%AE%97%E6%B3%95/"/>
      <url>/2023/09/07/Raft-%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-Raft-算法？"><a href="#什么是-Raft-算法？" class="headerlink" title="什么是 Raft 算法？"></a>什么是 Raft 算法？</h1><ul><li>Raft 算法就是<a href="https://brumbyhhh.github.io/2023/09/15/%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F-md/" style="color: #B0D468;">分布式</a>领域的一种共识算法</li></ul><h2 id="什么是共识算法？"><a href="#什么是共识算法？" class="headerlink" title="什么是共识算法？"></a>什么是共识算法？</h2><ul><li>分布式领域的共识算法是用于确保分布式系统中的多个节点能够达成一致的决策或达成共识，在分布式系统中，节点之间可能会因为网络延迟、故障或其他问题而出现不同步的情况，共识算法的目标是协调这些节点以达成一致的状态。</li><li>除了 Raft 算法，还有其他的共识算法，如 <a href="https://brumbyhhh.github.io/2023/09/15/Paxos-%E7%AE%97%E6%B3%95/" style="color: #B0D468">Paxos</a>，<a href="https://brumbyhhh.github.io/2023/09/15/%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90-Zookeeper/" style="color: #B0D468">Zookeeper</a> 的 ZAB 协议等，不同的共识算法具有不同的特性和适用场景。</li></ul><h1 id="Raft-算法的基本原理是什么？"><a href="#Raft-算法的基本原理是什么？" class="headerlink" title="Raft 算法的基本原理是什么？"></a>Raft 算法的基本原理是什么？</h1><ul><li>Raft 算法的核心思想就是通过选举机制和日志复制来实现共识，确保系统中的所有节点都达成相同的状态。</li><li><strong>选举机制</strong><ul><li>Raft 算法中的节点通过选举机制来确定一个领导者节点，领导者负责接收客户端请求，将其添加到日志中，并复制日志到其他节点。领导者选举是通过随机的超时机制来触发的，节点等待一个随机时间，然后发起选举请求，如果一个节点在一轮选举中获得了多数票的支持，那么它就会成为新的领导者。</li></ul></li><li><strong>日志复制</strong><ul><li>当领导者选举完成后，领导者负责维护一个日志，所有客户端的请求都会添加到这个日志中。领导者通过发送 Append Entries（追加条目） 消息将自己的日志条目复制到其他节点。其他节点接收到这些消息后，会根据领导者的日志来更新自己的日志，以保持一致性。</li><li><strong>什么是追加条目消息？</strong><ul><li>Append Entries 消息是 Raft 算法中的核心通信机制之一，用于实现日志的复制和一致性的维护。这种消息是领导者节点向跟随节点发送的，目的是将领导者自己的条目日志追加到追随者的日志中，从而保持各节点的日志一致。</li><li><strong>Append Entries 通常包括以下内容</strong><ul><li><strong>领导者的任期</strong>：消息包含了领导者的当前任期号码。领导者在每次选举后都会增加自己的任期号，以便跟随者可以识别领导者的更新。</li><li><strong>领导者的标识</strong>：用于标识领导者节点的唯一标识。</li><li><strong>前一日志条目信息</strong>：这部分信息包括前一条日志条目的索引和任期号。领导者将此消息发送给跟随者，以便跟随者可以根据这些信息确定从哪个位置开始追加日志。</li><li><strong>日志条目</strong>：领导者的日志条目将会追加到跟随者的日志中，如果领导者没有在跟随者的日志中找到匹配的前一日志条目（通过索引和任期号对比），则跟随者可能会拒绝追加操作，或者领导者会将跟随者的日志进行截断，从匹配的位置开始进行追加。</li><li><strong>领导者的提交索引</strong>：领导者会将自己的已提交索引发送给跟随者。跟随者会根据这个信息来更新自己的提交索引，确保多数节点已经接受并复制了这些日志条目。</li></ul></li><li>跟随者在收到 Append Entries 消息后会对其中的消息进行检查和处理，以保证日志的一致性。</li></ul></li></ul></li><li><strong>安全性</strong><ul><li>Raft 算法具有一些安全性的保证，例如：<ul><li>日志条目只能从领导者传播到其他节点。</li><li>一个节点只能在已提交的日志条目上应用状态机，以确保相同的命令在所有节点上具有相同的效果。<ul><li>在 Raft 中，当一个日志条目被领导者成功复制到大多数节点的日志中，它就被视为“已提交”。这是因为 Raft 要求多数节点都接受并复制了相同的日志条目，以确保数据的一致性。</li><li>在分布式系统中，通常有一个状态机，它能够执行一系列指令或操作，从而改变系统的状态。共识算法的目标之一就是确保所有的节点上的状态机执行相同的操作序列，以达到一致性。<ul><li>分布式系统中的状态机通常是指<strong>复制状态机</strong>。复制状态机是建立在状态机的基础上，复制状态机是一组状态机的副本，分布在不同的节点上，并且这些状态机的目标是在不同的节点上执行相同的操作序列，以确保系统的一致性。复制状态机通常用于分布式共识算法中，如 Raft 和 Paxos。</li><li><strong>什么是状态机？</strong><ul><li>状态机是一种抽象的计算模型，它定义了一组状态以及在这些状态之间的转换规则。状态机可以用来描述系统、算法或应用程序的行为，以及在不同输入条件下如何从一个状态转换到另一个状态。状态机可以分为<strong>有限状态机</strong>和<strong>图灵机</strong>等不同类型。</li><li>举个例子，假设有一个分布式的键值存储系统，其中包含多个节点，每个节点都存储一个键值对。这些节点的任务是根据客户端的请求来对键值对进行读取和写入操作。在这种情况下，我们可以将每个节点视为一个状态机。</li><li><strong>有限状态机</strong><ul><li>“有限”就是指状态的数量是有限的，有限状态机就是状态数量有限的状态机。</li><li>比如自动售货机，你没有选商品的时候，售货机是待命状态，你选了商品，它就进入商品选择状态，你点击确定这个商品，它就变成付款状态，你给了钱了，它把商品给你，然后它就变成了交易完成状态。</li></ul></li><li><strong>图灵机</strong><ul><li>图灵机是一种虚构的计算机，它有以下特征：<ul><li><strong>带子</strong>：一种无线长的纸带，分成格子，每个格子可以存储一个符号（如数字或字母）</li><li><strong>读写头</strong>：一个可以在纸带上移动的机械臂，可以读取当前格子的符号，也可以写入新的符号。</li><li><strong>状态</strong>：一组状态，其中一个状态是起始状态。图灵机的状态决定了它的行为。</li><li><strong>转移规则</strong>：规定了在某个状态下，当读写头读到某个符号时，应该执行什么操作，操作包括写入符号、移动读写头和改变状态。</li></ul></li><li>图灵机如何工作？<ul><li>图灵机从起始状态开始，在纸带上的一个格子上。</li><li>它读取当前格子的符号。</li><li>根据当前状态和读取的符号，查找转移规则来确定下一步的操作。</li><li>它可以写入一个新符号，将读写头向左或向右移动一个格子，或者改变状态。</li><li>然后，它重复上述过程，不断执行转移规则，直到某个条件满足，例如停机或达到特定状态。</li></ul></li><li>图灵机适用与解决一般的计算问题，包括算法、计算机程序等</li></ul></li></ul></li></ul></li><li>这句话的意思就是说，一个节点只有在大多数节点接受并被标记“已提交”的日志条目才能够执行状态机操作。这保证了在整个分布式系统中，所有节点都会按照相同的顺序执行相同的操作，从而维持系统的一致性。这是分布式共识算法的核心原则之一。</li></ul></li></ul></li></ul></li><li><strong>成员变更</strong><ul><li>Raft 允许在运行时动态添加或删除节点。这些变更通过特殊的配置变更日志条目来实现，确保新节点能够快速假如系统并保证一致性。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESP 协议</title>
      <link href="/2023/09/07/RESP-%E5%8D%8F%E8%AE%AE/"/>
      <url>/2023/09/07/RESP-%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>测试</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解分布式锁</title>
      <link href="/2023/09/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2023/09/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
