<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RESP 协议</title>
    <url>/2023/09/07/RESP-%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>测试</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Raft 算法</title>
    <url>/2023/09/07/Raft-%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>raft 算法</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>monorepo 架构和 turborepo 架构</title>
    <url>/2023/09/08/monorepo-%E6%9E%B6%E6%9E%84%E5%92%8C-turborepo-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>如何封装自己的 react UI 组件库（一）</title>
    <url>/2023/09/09/%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84-react-UI-%E7%BB%84%E4%BB%B6%E5%BA%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="创建-monorepo-项目，发布组件的步骤"><a href="#创建-monorepo-项目，发布组件的步骤" class="headerlink" title="创建 monorepo 项目，发布组件的步骤"></a>创建 monorepo 项目，发布组件的步骤</h1><ul>
<li>先创建一个项目<pre><code class="bash">mkdir wanwu-ui-project
cd wanwu-ui-project
vim pnpm.workspace.yml # 需要创建 pnpm.workspace.yml 才能使用 pnpm init -w 对项目进行初始化
pnpm init -w
mkdir packages # 存放子项目的地方
cd packages
mkdir wanwu-ui # 创建存放封装 ui 组件的项目
cd wanwu-ui
pnpm init
npx tsc --init # 创建 typescript 配置文件
pnpm add --save-dev typescript @types/node # 安装 typescript 相关的依赖
pnpm add react react-dom
</code></pre>
</li>
<li>为了能用 ts 编写组件，所以需要更改一些配置<ol>
<li>首先在 <code>tsconfig.json</code> 中指定 ts 文件编译之后的输出目录</li>
</ol>
<pre><code class="json">&#123;
  &quot;compilerOptions&quot;: &#123;
    &quot;outDir&quot;: &quot;./dist&quot;, // 指定编译后的输出目录
    &quot;module&quot;: &quot;esnext&quot;, // 使用 ES 模块规范
    &quot;moduleResolution&quot;: &quot;node&quot;,
    &quot;jsx&quot;: &quot;react&quot;,

    // 下面两个配置是为了确保模块导入的兼容性，通常适用于 CSS 模块化
    &quot;esModuleInterop&quot;: true,
    &quot;allowSyntheticDefaultImports&quot;: true,
  &#125;,

  &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.scss&quot;],
  &quot;exclude&quot;: [&quot;node_modules&quot;]
&#125;
</code></pre>
<ol start="2">
<li>这一步是在你编写完组件后才执行，使用 <code>npx tsc</code> 编译 ts 代码</li>
<li>创建 npm 包，需要对子项目 wanwu-ui 目录下的 <code>package.json</code> 进行一些修改</li>
</ol>
<pre><code class="json">&#123;
  &quot;name&quot;: &quot;wanwu-ui&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;main&quot;: &quot;dist/index.js&quot;, // 主入口文件
  &quot;module&quot;: &quot;dist/index.js&quot;, // ES 模块入口文件
  &quot;description&quot;: &quot;... some description&quot;
&#125;
</code></pre>
</li>
<li>发布到 npm<ul>
<li><code>pnpm publish</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>如何封装自己的 react UI 组件库（二）</title>
    <url>/2023/09/11/%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84-react-UI-%E7%BB%84%E4%BB%B6%E5%BA%93%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Button-按钮的实现"><a href="#Button-按钮的实现" class="headerlink" title="Button 按钮的实现"></a>Button 按钮的实现</h1><ul>
<li><p>实现思路很简单，就是将 html 的 Button 加上一些 css 样式，并让使用者可以传入 Button 的类型，例如 ghost 类型。</p>
<ul>
<li><p>Button.tsx 文件</p>
<ul>
<li>定义 Button 的一些属性</li>
</ul>
<pre><code class="typescript">interface ButtonProps &#123;
  onClick?: () =&gt; void;
  style?: React.CSSProperties;
  variant?: &quot;default&quot; | &quot;dashed&quot; | &quot;outline&quot; | &quot;ghost&quot;;
  children: React.ReactNode;
&#125;
</code></pre>
<ul>
<li>渲染 Button 组件</li>
</ul>
<pre><code class="typescript">const Button: React.FC&lt;ButtonProps&gt; = (&#123;
  onClick,
  style,
  variant = &quot;default&quot;,
  children,
&#125;) =&gt; &#123;
  return (
    &lt;button className=&#123;`button $&#123;variant&#125;`&#125; onClick=&#123;onClick&#125; style=&#123;style&#125;&gt;
      &#123;children&#125;
    &lt;/button&gt;
  );
&#125;;

export default Button;
</code></pre>
</li>
<li><p>引入 CSS 样式</p>
<ul>
<li>Button.css 文件</li>
</ul>
<pre><code class="css">/* 默认样式 */
.button &#123;
  background-color: #0967cc;
  color: white;
  border: none;
  padding: 10px 20px;
  cursor: pointer;
&#125;

/* 虚线框样式 */
.button.dashed &#123;
  border: 1px dashed #0967cc;
  background-color: transparent;
  color: #007bff;
&#125;

/* 无框样式 */
.button.outline &#123;
  border: 1px solid #0967cc;
  background-color: transparent;
  color: #007bff;
&#125;

/* 幽灵样式 */
.button.ghost &#123;
  background-color: transparent;
  color: #007bff;
&#125;

/* 鼠标悬停时的样式 */
.button:hover &#123;
  background-color: #0056b3;
  border-color: #0056b3;
&#125;

/* 点击时的样式 */
.button:active &#123;
  background-color: #007bff;
  border-color: #003d80;
&#125;

/* 获取焦点时的样式 */
.button:focus &#123;
  outline: none;
  box-shadow: 0 0 4px rgba(0, 123, 255, 0.5);
&#125;
</code></pre>
</li>
</ul>
</li>
</ul>
<h1 id="Button-的使用"><a href="#Button-的使用" class="headerlink" title="Button 的使用"></a>Button 的使用</h1><ul>
<li>我们的 Button 已经封装好了，在项目中可以使用我们自己封装的 Button 组件</li>
</ul>
<pre><code class="tsx">import &#123; Button &#125; from &quot;../../wanwu-ui/src/index&quot;;

function App() &#123;
  return (
    &lt;&gt;
      &lt;div&gt;
        &lt;Button variant=&quot;outline&quot; onClick=&#123;() =&gt; alert(&quot;点击按钮&quot;)&#125;&gt;&lt;/Button&gt;
      &lt;/div&gt;
    &lt;/&gt;
  );
&#125;

export default App;
</code></pre>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解分布式锁</title>
    <url>/2023/09/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>敏感词过滤如何实现</title>
    <url>/2023/09/08/%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="实现敏感词过滤的步骤"><a href="#实现敏感词过滤的步骤" class="headerlink" title="实现敏感词过滤的步骤"></a>实现敏感词过滤的步骤</h1><ul>
<li><strong>构建敏感词汇列表</strong>：首先你需要创建一个敏感词汇的列表或词库，表示不当内容。</li>
<li><strong>选择过滤方法</strong>:<ul>
<li><strong>关键词匹配</strong>：使用字符串匹配算法，检查文本中是否包含敏感词汇，这是最简单的方法，但不适用于复杂的敏感词汇。</li>
<li><strong>正则表达式</strong>：使用正则表达式来匹配敏感词汇，这允许更灵活的匹配模式。</li>
<li><strong>Tire 树</strong>：构建一个 Trie 树，将敏感词汇插入树中，并通过树的遍历来检查文本。</li>
<li><strong>机器学习</strong>：使用自然语言 NPL 和机器学习技术训练模型，以检测和过滤不当的内容。</li>
</ul>
</li>
<li><strong>过滤文本</strong>：将要过滤的文本传递给你选择的过滤方法，检查是否包含敏感词汇。</li>
<li><strong>替换或删除敏感词汇</strong>：如果文本中包含敏感词汇，你可以选择替换敏感词汇，将其标记为占位符或完全删除，具体取决于你的需求。</li>
<li><strong>性能优化</strong>：如果对于大量文本的处理，你需要考虑性能，可以使用一些技巧提高过滤速度，例如缓存已处理的文本、使用多线程或并行处理等。</li>
<li><strong>维护词库</strong>：定期更新敏感词汇列表以反映新的敏感内容。可以手动更新，也可以自动从可信来源获取。</li>
</ul>
<h1 id="过滤的方法"><a href="#过滤的方法" class="headerlink" title="过滤的方法"></a>过滤的方法</h1><p>选择过滤的方法，是实现敏感词过滤的关键，如何实现这个过滤方法呢？这篇文章主要使用前缀树来实现敏感词过滤的功能。我先来介绍一下什么是前缀树？</p>
<h2 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h2><ul>
<li><p><strong>什么是前缀树？</strong></p>
<ul>
<li>通常是用于存储和检索字符串集合中的字符串，它是一种用于快速查找和匹配前缀的数据结构，因此称为前缀树。</li>
<li><strong>前缀树的特点</strong><ol>
<li><strong>树状结构</strong>：前缀树是一个树，其中每个节点代表一个字符，从根节点开始到叶子节点的路径组合在一起形成一个字符串。根节点不包括字符，每个子节点表示一个字符。</li>
<li><strong>前缀匹配</strong>：前缀树主要用途是查找具有特定前缀的字符串。通过从根节点开始，沿着树的路径移动，可以逐个字符地匹配输入的前缀，直到找到相应的节点或者确定前缀不存在。</li>
<li><strong>高效的查找</strong>：因为前缀树将相同的前缀的字符串共享相同的前缀路径，因此它非常适合存储大量的字符串，并且可以在常数时间内查找、插入和删除字符串。</li>
<li><strong>空间消耗</strong>：前缀树的主要缺点是它可能占用大量的内存，特别是当字符串集合中的字符串共享大量前缀时，为了减少内存占用，可以使用压缩前缀树（如压缩字典或基数树）</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>如何实现前缀树？</strong></p>
<ul>
<li><p><strong>定义节点结构</strong></p>
<ul>
<li><code>children</code>：一个映射或数组，用于存储子节点，其中键或索引对应于字符串或字符集</li>
<li><code>isEnd</code>：一个布尔值，指示当前节点是否代表一个字符串的结尾。</li>
</ul>
<pre><code class="golang">// TrieNode 表示前缀树的节点
type TrieNode struct &#123;
    children map[rune]*TrieNode
    isEnd bool
&#125;
// Trie 表示前缀树
type Trie struct &#123;

&#125;
// NewTrie 创建一个新的前缀树
func NewTrie() *Trie &#123;
    return &amp;Trie &#123;
        root: &amp;TrieNode &#123;
            children: make(map[rune]*TrieNode),
            isEnd: false
        &#125;,
    &#125;
&#125;
</code></pre>
</li>
<li><p><strong>插入操作</strong></p>
<ul>
<li>实现插入操作以将字符串添加到前缀树中<ul>
<li>从根节点开始，遍历要插入的字符串的字符。</li>
<li>对于每个字符，检查它是否已经作为子节点的存在，如果不存在，则创建一个新节点并将其添加到当前节点的子节点映射或数组中。</li>
<li>移动到下一个节点，并继续这个过程，直到插入完整字符串。</li>
<li>在插入的最后一个字符节点上设置 <code>isEnd</code> 标志，表示一个完整的字符串已经插入。</li>
</ul>
</li>
</ul>
<pre><code class="golang">// 向前缀树中插入一个字符串
func (t *Trie) Insert(word string) &#123;
    node := t.root
    for _, char := range word &#123;
        if node.children[char] == nil &#123;
            node.children[char] = &amp;TrieNode&#123;
                children: make(map[rune]*TrieNode),
                isEnd: false,
            &#125;
        &#125;
        node = node.children[char]
    &#125;
    node.isEnd = true
&#125;
</code></pre>
</li>
<li><p><strong>搜索操作</strong></p>
<ul>
<li>实现搜索操作以查找前缀或整个字符串<ul>
<li>从根节点开始，遍历要搜索的字符串的字符。</li>
<li>对于每个字符，检查它是否作为子节点存在。如果存在，继续向下移动。</li>
<li>如果在搜索的过程中遇到任何字符节点不存在，或者搜索完成后发现当前节点的 <code>isEnd</code> 标志未设置，那么表示该字符串不存在于前缀树中。</li>
</ul>
</li>
</ul>
<pre><code class="golang">// 搜索前缀树以检查字符串是否存在
func (t *Trie) Search(word string) bool &#123;
    node := t.root
    for _, char := range word &#123;
        if node.children[char] == nil &#123;
            return false
        &#125;
        node = node.children[char]
    &#125;
    return node.isEnd
&#125;
</code></pre>
</li>
<li><p><strong>完整实现</strong></p>
<ul>
<li>golang 实现</li>
</ul>
<pre><code class="golang">package main
import &quot;fmt&quot;

// TrieNode 表示前缀树的节点
type TrieNode struct &#123;
    children map[rune]*TrieNode
    isEnd    bool
&#125;

// Trie 表示前缀树
type Trie struct &#123;
    root *TrieNode
&#125;

// NewTrie 创建一个新的前缀树
func NewTrie() *Trie &#123;
    return &amp;Trie&#123;
        root: &amp;TrieNode&#123;
            children: make(map[rune]*TrieNode),
            isEnd:    false,
        &#125;,
    &#125;
&#125;

// Insert 向前缀树中插入一个字符串
func (t *Trie) Insert(word string) &#123;
    node := t.root
    for _, char := range word &#123;
        if node.children[char] == nil &#123;
            node.children[char] = &amp;TrieNode&#123;
                children: make(map[rune]*TrieNode),
                isEnd:    false,
            &#125;
        &#125;
        node = node.children[char]
    &#125;
    node.isEnd = true
&#125;

// Search 搜索前缀树以检查字符串是否存在
func (t *Trie) Search(word string) bool &#123;
    node := t.root
    for _, char := range word &#123;
        if node.children[char] == nil &#123;
            return false
        &#125;
        node = node.children[char]
    &#125;
    return node.isEnd
&#125;

func main() &#123;
    trie := NewTrie()
    trie.Insert(&quot;apple&quot;)
    trie.Insert(&quot;app&quot;)
    trie.Insert(&quot;banana&quot;)

    fmt.Println(trie.Search(&quot;apple&quot;))   // true
    fmt.Println(trie.Search(&quot;app&quot;))     // true
    fmt.Println(trie.Search(&quot;banana&quot;))  // true
    fmt.Println(trie.Search(&quot;orange&quot;))  // false
    fmt.Println(trie.Search(&quot;apples&quot;))  // false
&#125;
</code></pre>
</li>
<li><p>Java 实现</p>
</li>
</ul>
<pre><code class="java">import java.util.HashMap;
import java.util.Map;

class TrieNode &#123;
  Map&lt;Character, TrieNode&gt; children;
  boolean isEnd;

  public TrieNode() &#123;
      this.children = new HashMap&lt;&gt;();
      this.isEnd = false;
  &#125;
&#125;

class Trie &#123;
  TrieNode root;

  public Trie() &#123;
      this.root = new TriredNode();
  &#125;

  public void insert(String word) &#123;
      TrieNode node = this.root;
      for (char c : word.toCharArray()) &#123;
          if (!node.children.containsKey(c)) &#123;
              node.children.put(c, new TrieNode());
          &#125;
          node = node.children.get(c);
      &#125;
      node.isEnd = true;
  &#125;

  public void search(String word) &#123;
      TrieNode node = this.root;
      for (char c : word.toCharArray()) &#123;
          if (!node.children.containsKey(c)) &#123;
              return false;
          &#125;
          node = node.children.get(c);
      &#125;
      return node.isEnd;
  &#125;
&#125;
public class Main &#123;
  public static void main(String[] args) &#123;
      Trie trie = new Trie();
      trie.insert(&quot;apple&quot;);
      trie.insert(&quot;app&quot;);
      trie.insert(&quot;banana&quot;);

      System.out.println(trie.search(&quot;apple&quot;));   // true
      System.out.println(trie.search(&quot;app&quot;));     // true
      System.out.println(trie.search(&quot;banana&quot;));  // true
      System.out.println(trie.search(&quot;orange&quot;));  // false
      System.out.println(trie.search(&quot;apples&quot;));  // false
  &#125;
&#125;
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
