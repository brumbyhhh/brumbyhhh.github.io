<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go 的并发原理</title>
    <url>/2023/10/07/Go-%E7%9A%84%E5%B9%B6%E5%8F%91%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>In Search of an Understandable Consensus Algorithm</title>
    <url>/2023/09/15/In-Search-of-an-Understandable-Consensus-Algorithm/</url>
    <content><![CDATA[<h1 id="One-Page"><a href="#One-Page" class="headerlink" title="One Page"></a>One Page</h1><h2 id="重叠多数原则"><a href="#重叠多数原则" class="headerlink" title="重叠多数原则"></a>重叠多数原则</h2><ul>
<li>重叠多数原则是 Raft 一致性算法中用于保证安全性的一种机制，它的核心思想是确保在集群中进行成员变更（例如添加和删除节点）时，多数派（majority）的投票会有一定的重叠，以防止出现分裂的情况。<ul>
<li>出现分裂是什么意思：这个就是指的是分区故障，就是指集群中发生了一次网络问题，导致节点分成了两个子集：{A、B} 和 {C、D、E}。这种情况下，节点可能会导致问题，因为每个子集都可能试图选举自己的领导者。</li>
</ul>
</li>
<li>让我结合选举过程和 Overlapping Majorities 原则举一个例子，以解释这个 Overlapping Majorities：<ul>
<li>假设我们有一个由 5 个节点组成的 Raft 集群，分别是 A、B、C、D、E。这某个时刻，集群中的节点如下，A 是领导者，B、C、D 都是追随者，E 是新节点。</li>
<li>现在这个，节点 E 是新加入的节点，它希望成为新领导，在这个例子中，Overlapping Majorities 有重要的作用。<ul>
<li><strong>预投票阶段</strong><ul>
<li>节点E（新节点）发起了预投票请求，要求其他节点（A、B、C、D）支持它成为领导者。</li>
<li>Overlapping Majorities 原则要求节点 E 在预投票中至少获得多数派的支持，假设在预投票中，节点 E 获得了 A、B、C 三个节点的支持，因为它们都认为 E 有资格成为领导者。<ul>
<li><strong>什么是预投票阶段？</strong><ul>
<li>预投票通常是新节点在加入集群并尝试领导者之前发起的一种请求。这个预投票阶段是为了确定新节点是否有资格继续参与正式选举。如果新节点在预选举投票中没有获得多数派的支持，它不会继续参与正式的选举，从而避免不必要的选举冲突。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>正式选举阶段</strong><ul>
<li>由于节点 E 在预投票中获得了多数派的支持，它进入了正式选举阶段。</li>
<li>在正式选举中，所有节点（包括新节点 E）发出真正的选票。</li>
<li>假设在正式选举中，节点 E 获得了自己的选票和 B、C、D 三个节点的选票，因此它总共得到了 4 票，而节点 A 仅得到了自己的选票。</li>
</ul>
</li>
<li><strong>结果</strong><ul>
<li>由于节点 E 在正式选举中获得了多数派的支持（4 票中的 3 票），它成为了新的领导者。</li>
</ul>
</li>
</ul>
</li>
<li>在这个例子当中，Overlapping Majorities 原则的应用是确保新节点 E 在选举中获得了旧节点（B、C、D）的支持，这减少了分裂和不一致的风险，同时保证了选举的一致性和可靠性。节点 E 不仅仅依赖于自己的选票，还获得了来自旧节点的一些选票，以确保选举的成功。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Paxos 算法</title>
    <url>/2023/09/15/Paxos-%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Raft 算法</title>
    <url>/2023/09/07/Raft-%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="什么是-Raft-算法？"><a href="#什么是-Raft-算法？" class="headerlink" title="什么是 Raft 算法？"></a>什么是 Raft 算法？</h1><ul>
<li>Raft 算法就是<a href="https://brumbyhhh.github.io/2023/09/15/%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F-md/" style="color: #B0D468;">分布式</a>领域的一种共识算法</li>
</ul>
<h2 id="什么是共识算法？"><a href="#什么是共识算法？" class="headerlink" title="什么是共识算法？"></a>什么是共识算法？</h2><ul>
<li>分布式领域的共识算法是用于确保分布式系统中的多个节点能够达成一致的决策或达成共识，在分布式系统中，节点之间可能会因为网络延迟、故障或其他问题而出现不同步的情况，共识算法的目标是协调这些节点以达成一致的状态。</li>
<li>除了 Raft 算法，还有其他的共识算法，如 <a href="https://brumbyhhh.github.io/2023/09/15/Paxos-%E7%AE%97%E6%B3%95/" style="color: #B0D468">Paxos</a>，<a href="https://brumbyhhh.github.io/2023/09/15/%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90-Zookeeper/" style="color: #B0D468">Zookeeper</a> 的 ZAB 协议等，不同的共识算法具有不同的特性和适用场景。</li>
</ul>
<h1 id="Raft-算法的基本原理是什么？"><a href="#Raft-算法的基本原理是什么？" class="headerlink" title="Raft 算法的基本原理是什么？"></a>Raft 算法的基本原理是什么？</h1><ul>
<li><p>Raft 算法的核心思想就是通过选举机制和日志复制来实现共识，确保系统中的所有节点都达成相同的状态。</p>
</li>
<li><p><strong>选举机制</strong></p>
<ul>
<li>Raft 算法中的节点通过选举机制来确定一个领导者节点，领导者负责接收客户端请求，将其添加到日志中，并复制日志到其他节点。领导者选举是通过随机的超时机制来触发的，节点等待一个随机时间，然后发起选举请求，如果一个节点在一轮选举中获得了多数票的支持，那么它就会成为新的领导者。</li>
</ul>
</li>
<li><p><strong>日志复制</strong></p>
<ul>
<li>当领导者选举完成后，领导者负责维护一个日志，所有客户端的请求都会添加到这个日志中。领导者通过发送 Append Entries（追加条目） 消息将自己的日志条目复制到其他节点。其他节点接收到这些消息后，会根据领导者的日志来更新自己的日志，以保持一致性。</li>
<li><strong>什么是追加条目消息？</strong><ul>
<li>Append Entries 消息是 Raft 算法中的核心通信机制之一，用于实现日志的复制和一致性的维护。这种消息是领导者节点向跟随节点发送的，目的是将领导者自己的条目日志追加到追随者的日志中，从而保持各节点的日志一致。</li>
<li><strong>Append Entries 通常包括以下内容</strong><ul>
<li><strong>领导者的任期</strong>：消息包含了领导者的当前任期号码。领导者在每次选举后都会增加自己的任期号，以便跟随者可以识别领导者的更新。</li>
<li><strong>领导者的标识</strong>：用于标识领导者节点的唯一标识。</li>
<li><strong>前一日志条目信息</strong>：这部分信息包括前一条日志条目的索引和任期号。领导者将此消息发送给跟随者，以便跟随者可以根据这些信息确定从哪个位置开始追加日志。</li>
<li><strong>日志条目</strong>：领导者的日志条目将会追加到跟随者的日志中，如果领导者没有在跟随者的日志中找到匹配的前一日志条目（通过索引和任期号对比），则跟随者可能会拒绝追加操作，或者领导者会将跟随者的日志进行截断，从匹配的位置开始进行追加。</li>
<li><strong>领导者的提交索引</strong>：领导者会将自己的已提交索引发送给跟随者。跟随者会根据这个信息来更新自己的提交索引，确保多数节点已经接受并复制了这些日志条目。</li>
</ul>
</li>
<li>跟随者在收到 Append Entries 消息后会对其中的消息进行检查和处理，以保证日志的一致性。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>安全性</strong></p>
<ul>
<li>Raft 算法具有一些安全性的保证，例如：<ul>
<li>日志条目只能从领导者传播到其他节点。</li>
<li>一个节点只能在已提交的日志条目上应用状态机，以确保相同的命令在所有节点上具有相同的效果。<ul>
<li>在 Raft 中，当一个日志条目被领导者成功复制到大多数节点的日志中，它就被视为“已提交”。这是因为 Raft 要求多数节点都接受并复制了相同的日志条目，以确保数据的一致性。</li>
<li>在分布式系统中，通常有一个状态机，它能够执行一系列指令或操作，从而改变系统的状态。共识算法的目标之一就是确保所有的节点上的状态机执行相同的操作序列，以达到一致性。<ul>
<li>分布式系统中的状态机通常是指<strong>复制状态机</strong>。复制状态机是建立在状态机的基础上，复制状态机是一组状态机的副本，分布在不同的节点上，并且这些状态机的目标是在不同的节点上执行相同的操作序列，以确保系统的一致性。复制状态机通常用于分布式共识算法中，如 Raft 和 Paxos。</li>
<li><strong>什么是状态机？</strong><ul>
<li>状态机是一种抽象的计算模型，它定义了一组状态以及在这些状态之间的转换规则。状态机可以用来描述系统、算法或应用程序的行为，以及在不同输入条件下如何从一个状态转换到另一个状态。状态机可以分为<strong>有限状态机</strong>和<strong>图灵机</strong>等不同类型。</li>
<li>举个例子，假设有一个分布式的键值存储系统，其中包含多个节点，每个节点都存储一个键值对。这些节点的任务是根据客户端的请求来对键值对进行读取和写入操作。在这种情况下，我们可以将每个节点视为一个状态机。</li>
<li><strong>有限状态机</strong><ul>
<li>“有限”就是指状态的数量是有限的，有限状态机就是状态数量有限的状态机。</li>
<li>比如自动售货机，你没有选商品的时候，售货机是待命状态，你选了商品，它就进入商品选择状态，你点击确定这个商品，它就变成付款状态，你给了钱了，它把商品给你，然后它就变成了交易完成状态。</li>
</ul>
</li>
<li><strong>图灵机</strong><ul>
<li>图灵机是一种虚构的计算机，它有以下特征：<ul>
<li><strong>带子</strong>：一种无线长的纸带，分成格子，每个格子可以存储一个符号（如数字或字母）</li>
<li><strong>读写头</strong>：一个可以在纸带上移动的机械臂，可以读取当前格子的符号，也可以写入新的符号。</li>
<li><strong>状态</strong>：一组状态，其中一个状态是起始状态。图灵机的状态决定了它的行为。</li>
<li><strong>转移规则</strong>：规定了在某个状态下，当读写头读到某个符号时，应该执行什么操作，操作包括写入符号、移动读写头和改变状态。</li>
</ul>
</li>
<li>图灵机如何工作？<ul>
<li>图灵机从起始状态开始，在纸带上的一个格子上。</li>
<li>它读取当前格子的符号。</li>
<li>根据当前状态和读取的符号，查找转移规则来确定下一步的操作。</li>
<li>它可以写入一个新符号，将读写头向左或向右移动一个格子，或者改变状态。</li>
<li>然后，它重复上述过程，不断执行转移规则，直到某个条件满足，例如停机或达到特定状态。</li>
</ul>
</li>
<li>图灵机适用与解决一般的计算问题，包括算法、计算机程序等</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>这句话的意思就是说，一个节点只有在大多数节点接受并被标记“已提交”的日志条目才能够执行状态机操作。这保证了在整个分布式系统中，所有节点都会按照相同的顺序执行相同的操作，从而维持系统的一致性。这是分布式共识算法的核心原则之一。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>成员变更</strong></p>
<ul>
<li>Raft 允许在运行时动态添加或删除节点。这些变更通过特殊的配置变更日志条目来实现，确保新节点能够快速假如系统并保证一致性。</li>
</ul>
</li>
<li><p><strong>实现一个简单的 raft 算法</strong></p>
</li>
</ul>
<pre><code class="golang">
</code></pre>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Raft 算法实现一个分布式数据库</title>
    <url>/2023/10/04/Raft%20%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E5%88%86%E6%9E%90%EF%BC%89/</url>
    <content><![CDATA[<p><strong>构建一个分布式数据库系统是一个复杂的工程，使用 Raft 算法来保证数据的一致性和可用性是一个不错的选择。</strong></p>
<h1 id="步骤1：定义数据模型和操作"><a href="#步骤1：定义数据模型和操作" class="headerlink" title="步骤1：定义数据模型和操作"></a>步骤1：定义数据模型和操作</h1><p><strong>思路</strong>：首先，需要明确定义一个数据库中的数据模型，包括表、字段、索引等。然后，确定支持的操作，例如插入、更新、删除、查询等。<br><strong>重难点和解决方案</strong></p>
<ul>
<li>数据模型设计需要考虑性能和拓展性，需要合理选择数据存储引擎，例如使用关系型数据库、NoSQL 数据库或自定义存储引擎。</li>
<li>操作的并发性处理可能会导致数据一致性问题。使用分布式事务或乐观并发控制来解决。</li>
</ul>
<h1 id="步骤2：设计分布式架构"><a href="#步骤2：设计分布式架构" class="headerlink" title="步骤2：设计分布式架构"></a>步骤2：设计分布式架构</h1><p><strong>思路</strong>：确定系统的分布式架构，包括节点角色（领导者、跟随、候选者）、数据分片、节点通信和故障处理。<br><strong>重难点和解决方案</strong></p>
<ul>
<li>架构设计需要考虑系统的可拓展性和高可用性。合理划分数据分片、实现负载均衡和故障恢复。</li>
<li>使用 Raft 算法来确保数据的一致性。实现选举、领导者切换、日志复制等核心功能。</li>
</ul>
<h1 id="步骤3：实现-Raft-算法"><a href="#步骤3：实现-Raft-算法" class="headerlink" title="步骤3：实现 Raft 算法"></a>步骤3：实现 Raft 算法</h1><p><strong>思路</strong>：实现 Raft 算法来维护集群中的节点状态、选举和数据复制。确保每个节点都能维护一致的日志副本。<br><strong>重难点和解决方案</strong></p>
<ul>
<li>Raft 算法的核心是选举和领导者切换，需要处理选票请求和响应，以及超时情况的处理。</li>
<li>日志复制需要确保数据的一致性，包括日志的追加、提交和应用到状态机。</li>
</ul>
<h1 id="步骤4：实现分布式协调"><a href="#步骤4：实现分布式协调" class="headerlink" title="步骤4：实现分布式协调"></a>步骤4：实现分布式协调</h1><p><strong>思路</strong>：实现分布式协调机制，使得节点之间能够协作来处理客户端请求，包括数据读写操作。<br><strong>重难点和解决方案</strong></p>
<ul>
<li>使用 Raft 协议来协调写入操作，确保数据一致性。对于读写操作，可以选择从 Leader 节点或副本节点读取数据。实现适当的锁或事务机制来处理并发请求。</li>
</ul>
<h1 id="步骤5：数据一致性和容错性"><a href="#步骤5：数据一致性和容错性" class="headerlink" title="步骤5：数据一致性和容错性"></a>步骤5：数据一致性和容错性</h1><p><strong>思路</strong>：确保数据一致性，处理节点故障和网络分区。<br><strong>重难点和解决方案</strong></p>
<ul>
<li>在分布式环境中处理数据一致性和容错性是关键，可以使用 Raft 协议来确保数据一致性，实现故障检测、自动故障转移和数据备份恢复机制，以增强容错性。</li>
</ul>
<h1 id="步骤6：性能优化和监控"><a href="#步骤6：性能优化和监控" class="headerlink" title="步骤6：性能优化和监控"></a>步骤6：性能优化和监控</h1><p><strong>思路</strong>：进行性能检测和优化，实现监控系统以监视集群状态。<br><strong>重难点和解决方案</strong></p>
<ul>
<li>处理大量请求的性能问题和监控系统的设计，可以使用缓存来减轻读取压力，优化查询执行计划，实施监控系统可视化性能数据。</li>
</ul>
<h1 id="步骤7：安全性和权限管理"><a href="#步骤7：安全性和权限管理" class="headerlink" title="步骤7：安全性和权限管理"></a>步骤7：安全性和权限管理</h1><p><strong>思路</strong>：实现身份验证、授权和加密机制，保护数据不受未经授权的访问。<br><strong>重难点和解决方案</strong></p>
<ul>
<li>确保数据的安全性和访问控制。可以实现安全协议如 TLS&#x2F;SSL 来加密数据传输，使用身份验证令牌或证书来验证客户端身份，实施访问控制列表（ACL）来管理权限。</li>
</ul>
<h1 id="步骤8：自动化部署和维护"><a href="#步骤8：自动化部署和维护" class="headerlink" title="步骤8：自动化部署和维护"></a>步骤8：自动化部署和维护</h1><p><strong>思路</strong>：使用容器化技术如 Docker 和编排工具如 Kubernetes 来自动化部署和拓展。<br><strong>重难点和解决方案</strong></p>
<ul>
<li>部署和维护分布式系统需要自动化和可伸缩性，可以利用容器编排工具来简化部署，使用自动化脚本来监控和维护集群。</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>算法</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>monorepo 架构和 turborepo 项目管理</title>
    <url>/2023/09/08/monorepo-%E6%9E%B6%E6%9E%84%E5%92%8C-turborepo-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="monorepo-架构"><a href="#monorepo-架构" class="headerlink" title="monorepo 架构"></a>monorepo 架构</h1><h2 id="什么是-monorepo-架构"><a href="#什么是-monorepo-架构" class="headerlink" title="什么是 monorepo 架构"></a>什么是 monorepo 架构</h2><ul>
<li>monorepo（单一代码仓库） 架构是一种软件开发架构，其中一个项目将多个相关的项目或库，存储在一个单一的代码仓库中，而不是将它们分割成多个独立的代码仓库。</li>
<li>这个架构的主要思想就是将所有的项目代码和相关资源集中管理，以提高开发效率、协作性和代码共享。</li>
</ul>
<h2 id="monorepo-的优缺点"><a href="#monorepo-的优缺点" class="headerlink" title="monorepo 的优缺点"></a>monorepo 的优缺点</h2><ul>
<li><strong>优点</strong>：<ul>
<li><strong>代码共享和重用</strong>：不同的项目之间可以更轻松的共享代码和模块，可以降低测试成本，提高代码的可维护性。</li>
<li><strong>统一的构建和部署流程</strong>：所有的项目使用相同的构建工具和流程，使构建、测试和部署更加一致和可控。</li>
<li><strong>更好的协作和可见性</strong>：开发团队可以更容易地查看和协作其他项目的代码，因为它们都存放在同一个仓库，不需要切换多个仓库。</li>
<li><strong>版本管理和依赖管理</strong>：版本控制和依赖管理在 monorepo 中更加简化，因为所有项目都受到相同的版本管理策略的约束，可以减少版本冲突。<ul>
<li><strong>什么是相同的版本管理策略？</strong><ul>
<li><strong>共享版本号</strong>：所有项目的版本号都是统一的，就是说你在一个项目中进行了版本号的更改，其他项目的版本号也会更改，这确保了所有项目在同一个版本号下工作。</li>
<li><strong>共享依赖管理</strong>：monorepo 的所有项目通常会共享相同的依赖管理机制。这意味着它们可能使用相同的依赖管理工具（如 pnpm 或 yarn），并共享依赖项的版本信息，这有助于减少版本冲突，确保依赖项的一致性。</li>
<li><strong>版本发布和部署协调</strong>：在 monorepo 中，版本发布和部署通常是协调的。这意味着当一个项目升级到新版本时，可能需要确保其他项目也能够适应这个新版本，以避免不兼容或错误。</li>
</ul>
</li>
</ul>
</li>
<li><strong>更容易重构和代码重组</strong>：因为所有代码都在同一个仓库中，因此更容易进行大规模的重构或重新组织代码。</li>
<li><strong>更快的构建和测试</strong>：monorepo 可以充分的利用缓存和共享依赖，因此在构建和测试方面都能更高效。</li>
</ul>
</li>
<li><strong>缺点</strong>：<ul>
<li><strong>复杂性增加</strong>：将多个项目或库存储在一个单一的代码仓库中可能会增加仓库的复杂性。大型 monorepo 可能会变得难以管理，特别是团队中有多个开发人员同时提交更改时。</li>
<li><strong>构建和部署时间延长</strong>：如果 monorepo 包含大量的项目或库，构建和部署整个仓库可能会变得非常耗时，尤其是在 CI&#x2F;CD 流程中。</li>
<li><strong>难以维护权限和访问控制</strong>：在 monorepo 中实施细粒度的权限和访问控制可能变得很复杂，有时需要额外的工作来确保只有特定项目的开发人员能够访问或修改代码。</li>
<li><strong>依赖冲突</strong>：在某些情况下，monorepo 也可能会产生依赖冲突，比如 monorepo 的两个项目中一个项目需要较新的依赖，另一个老项目中需要较老的依赖，这种情况就会依赖冲突。解决方法就是定期进行测试和构建，以确保所有的项目与其依赖项保持兼容。</li>
<li><strong>团队协作问题</strong>：monorepo 可能需要更多的团队协作和沟通，以确保不同项目之间的变更不会冲突或破坏其他部分代码。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>RESP 协议</title>
    <url>/2023/09/07/RESP-%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>测试</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>从递归到回溯</title>
    <url>/2023/09/19/%E4%BB%8E%E9%80%92%E5%BD%92%E5%88%B0%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<h1 id="递归详解"><a href="#递归详解" class="headerlink" title="递归详解"></a>递归详解</h1><h2 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h2><ul>
<li>递归函数就是一个调用自己的函数，通常包括两个部分，<strong>基本情况（递归终止条件）</strong> 和 <strong>递归情况（将问题分解为更小的子问题）</strong></li>
</ul>
<h2 id="什么情况下用递归"><a href="#什么情况下用递归" class="headerlink" title="什么情况下用递归"></a>什么情况下用递归</h2><ol>
<li>问题是否可以被分解为子问题？<ul>
<li>首先考虑问题是否可以被分解为一个或多个规模较小的且相似的子问题。</li>
</ul>
</li>
<li>是否存在递归终止条件？<ul>
<li>这是避免无限递归的关键。</li>
</ul>
</li>
<li>问题是否符合递归的结构？<ul>
<li>有些问题自然的具有递归的结构，如树、图、链表等数据结构。</li>
</ul>
</li>
<li>递归是否能够简化问题？<ul>
<li>有时递归能使问题更容易解决，可以提供简洁的解决方案。</li>
</ul>
</li>
<li>性能是否可接受？<ul>
<li>递归可能会导致堆栈溢出或效率低下。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>如何封装自己的 react UI 组件库（搭建环境）</title>
    <url>/2023/09/09/%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84-react-UI-%E7%BB%84%E4%BB%B6%E5%BA%93%EF%BC%88%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="创建-monorepo-项目，发布组件的步骤"><a href="#创建-monorepo-项目，发布组件的步骤" class="headerlink" title="创建 monorepo 项目，发布组件的步骤"></a>创建 monorepo 项目，发布组件的步骤</h1><ul>
<li>先创建一个项目<pre><code class="bash">mkdir wanwu-ui-project
cd wanwu-ui-project
vim pnpm.workspace.yml # 需要创建 pnpm.workspace.yml 才能使用 pnpm init -w 对项目进行初始化
pnpm init -w
mkdir packages # 存放子项目的地方
cd packages
mkdir wanwu-ui # 创建存放封装 ui 组件的项目
cd wanwu-ui
pnpm init
npx tsc --init # 创建 typescript 配置文件
pnpm add --save-dev typescript @types/node # 安装 typescript 相关的依赖
pnpm add react react-dom
</code></pre>
</li>
<li>为了能用 ts 编写组件，所以需要更改一些配置<ol>
<li>首先在 <code>tsconfig.json</code> 中指定 ts 文件编译之后的输出目录</li>
</ol>
<pre><code class="json">&#123;
  &quot;compilerOptions&quot;: &#123;
    &quot;outDir&quot;: &quot;./dist&quot;, // 指定编译后的输出目录
    &quot;module&quot;: &quot;esnext&quot;, // 使用 ES 模块规范
    &quot;moduleResolution&quot;: &quot;node&quot;,
    &quot;jsx&quot;: &quot;react&quot;,

    // 下面两个配置是为了确保模块导入的兼容性，通常适用于 CSS 模块化
    &quot;esModuleInterop&quot;: true,
    &quot;allowSyntheticDefaultImports&quot;: true,
  &#125;,

  &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.scss&quot;],
  &quot;exclude&quot;: [&quot;node_modules&quot;]
&#125;
</code></pre>
<ol start="2">
<li>这一步是在你编写完组件后才执行，使用 <code>npx tsc</code> 编译 ts 代码</li>
<li>创建 npm 包，需要对子项目 wanwu-ui 目录下的 <code>package.json</code> 进行一些修改</li>
</ol>
<pre><code class="json">&#123;
  &quot;name&quot;: &quot;wanwu-ui&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;main&quot;: &quot;dist/index.js&quot;, // 主入口文件
  &quot;module&quot;: &quot;dist/index.js&quot;, // ES 模块入口文件
  &quot;description&quot;: &quot;... some description&quot;
&#125;
</code></pre>
</li>
<li>发布到 npm<ul>
<li><code>pnpm publish</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>如何封装自己的 react UI 组件库（Button）</title>
    <url>/2023/09/11/%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84-react-UI-%E7%BB%84%E4%BB%B6%E5%BA%93%EF%BC%88Button%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Button-按钮的实现"><a href="#Button-按钮的实现" class="headerlink" title="Button 按钮的实现"></a>Button 按钮的实现</h1><ul>
<li><p>实现思路很简单，就是将 html 的 Button 加上一些 css 样式，并让使用者可以传入 Button 的类型，例如 ghost 类型。</p>
<ul>
<li><p>Button.tsx 文件</p>
<ul>
<li>定义 Button 的一些属性</li>
</ul>
<pre><code class="typescript">interface ButtonProps &#123;
  onClick?: () =&gt; void;
  style?: React.CSSProperties;
  variant?: &quot;default&quot; | &quot;dashed&quot; | &quot;outline&quot; | &quot;ghost&quot;;
  children: React.ReactNode;
&#125;
</code></pre>
<ul>
<li>渲染 Button 组件</li>
</ul>
<pre><code class="typescript">const Button: React.FC&lt;ButtonProps&gt; = (&#123;
  onClick,
  style,
  variant = &quot;default&quot;,
  children,
&#125;) =&gt; &#123;
  return (
    &lt;button className=&#123;`button $&#123;variant&#125;`&#125; onClick=&#123;onClick&#125; style=&#123;style&#125;&gt;
      &#123;children&#125;
    &lt;/button&gt;
  );
&#125;;

export default Button;
</code></pre>
</li>
<li><p>引入 CSS 样式</p>
<ul>
<li>Button.css 文件</li>
</ul>
<pre><code class="css">/* 默认样式 */
.button &#123;
  background-color: #0967cc;
  color: white;
  border: none;
  padding: 10px 20px;
  cursor: pointer;
&#125;

/* 虚线框样式 */
.button.dashed &#123;
  border: 1px dashed #0967cc;
  background-color: transparent;
  color: #007bff;
&#125;

/* 无框样式 */
.button.outline &#123;
  border: 1px solid #0967cc;
  background-color: transparent;
  color: #007bff;
&#125;

/* 幽灵样式 */
.button.ghost &#123;
  background-color: transparent;
  color: #007bff;
&#125;

/* 鼠标悬停时的样式 */
.button:hover &#123;
  background-color: #0056b3;
  border-color: #0056b3;
&#125;

/* 点击时的样式 */
.button:active &#123;
  background-color: #007bff;
  border-color: #003d80;
&#125;

/* 获取焦点时的样式 */
.button:focus &#123;
  outline: none;
  box-shadow: 0 0 4px rgba(0, 123, 255, 0.5);
&#125;
</code></pre>
</li>
</ul>
</li>
</ul>
<h1 id="Button-的使用"><a href="#Button-的使用" class="headerlink" title="Button 的使用"></a>Button 的使用</h1><ul>
<li>我们的 Button 已经封装好了，在项目中可以使用我们自己封装的 Button 组件</li>
</ul>
<pre><code class="tsx">import &#123; Button &#125; from &quot;../../wanwu-ui/src/index&quot;;

function App() &#123;
  return (
    &lt;&gt;
      &lt;div&gt;
        &lt;Button variant=&quot;outline&quot; onClick=&#123;() =&gt; alert(&quot;点击按钮&quot;)&#125;&gt;&lt;/Button&gt;
      &lt;/div&gt;
    &lt;/&gt;
  );
&#125;

export default App;
</code></pre>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>敏感词过滤如何实现</title>
    <url>/2023/09/08/%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="实现敏感词过滤的步骤"><a href="#实现敏感词过滤的步骤" class="headerlink" title="实现敏感词过滤的步骤"></a>实现敏感词过滤的步骤</h1><ul>
<li><strong>构建敏感词汇列表</strong>：首先你需要创建一个敏感词汇的列表或词库，表示不当内容。</li>
<li><strong>选择过滤方法</strong>:<ul>
<li><strong>关键词匹配</strong>：使用字符串匹配算法，检查文本中是否包含敏感词汇，这是最简单的方法，但不适用于复杂的敏感词汇。</li>
<li><strong>正则表达式</strong>：使用正则表达式来匹配敏感词汇，这允许更灵活的匹配模式。</li>
<li><strong>Tire 树</strong>：构建一个 Trie 树，将敏感词汇插入树中，并通过树的遍历来检查文本。</li>
<li><strong>机器学习</strong>：使用自然语言 NPL 和机器学习技术训练模型，以检测和过滤不当的内容。</li>
</ul>
</li>
<li><strong>过滤文本</strong>：将要过滤的文本传递给你选择的过滤方法，检查是否包含敏感词汇。</li>
<li><strong>替换或删除敏感词汇</strong>：如果文本中包含敏感词汇，你可以选择替换敏感词汇，将其标记为占位符或完全删除，具体取决于你的需求。</li>
<li><strong>性能优化</strong>：如果对于大量文本的处理，你需要考虑性能，可以使用一些技巧提高过滤速度，例如缓存已处理的文本、使用多线程或并行处理等。</li>
<li><strong>维护词库</strong>：定期更新敏感词汇列表以反映新的敏感内容。可以手动更新，也可以自动从可信来源获取。</li>
</ul>
<h1 id="过滤的方法"><a href="#过滤的方法" class="headerlink" title="过滤的方法"></a>过滤的方法</h1><p>选择过滤的方法，是实现敏感词过滤的关键，如何实现这个过滤方法呢？这篇文章主要使用前缀树来实现敏感词过滤的功能。我先来介绍一下什么是前缀树？</p>
<h2 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h2><ul>
<li><p><strong>什么是前缀树？</strong></p>
<ul>
<li>通常是用于存储和检索字符串集合中的字符串，它是一种用于快速查找和匹配前缀的数据结构，因此称为前缀树。</li>
<li><strong>前缀树的特点</strong><ol>
<li><strong>树状结构</strong>：前缀树是一个树，其中每个节点代表一个字符，从根节点开始到叶子节点的路径组合在一起形成一个字符串。根节点不包括字符，每个子节点表示一个字符。</li>
<li><strong>前缀匹配</strong>：前缀树主要用途是查找具有特定前缀的字符串。通过从根节点开始，沿着树的路径移动，可以逐个字符地匹配输入的前缀，直到找到相应的节点或者确定前缀不存在。</li>
<li><strong>高效的查找</strong>：因为前缀树将相同的前缀的字符串共享相同的前缀路径，因此它非常适合存储大量的字符串，并且可以在常数时间内查找、插入和删除字符串。</li>
<li><strong>空间消耗</strong>：前缀树的主要缺点是它可能占用大量的内存，特别是当字符串集合中的字符串共享大量前缀时，为了减少内存占用，可以使用压缩前缀树（如压缩字典或基数树）</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>如何实现前缀树？</strong></p>
<ul>
<li><p><strong>定义节点结构</strong></p>
<ul>
<li><code>children</code>：一个映射或数组，用于存储子节点，其中键或索引对应于字符串或字符集</li>
<li><code>isEnd</code>：一个布尔值，指示当前节点是否代表一个字符串的结尾。</li>
</ul>
<pre><code class="golang">// TrieNode 表示前缀树的节点
type TrieNode struct &#123;
    children map[rune]*TrieNode
    isEnd bool
&#125;
// Trie 表示前缀树
type Trie struct &#123;

&#125;
// NewTrie 创建一个新的前缀树
func NewTrie() *Trie &#123;
    return &amp;Trie &#123;
        root: &amp;TrieNode &#123;
            children: make(map[rune]*TrieNode),
            isEnd: false
        &#125;,
    &#125;
&#125;
</code></pre>
</li>
<li><p><strong>插入操作</strong></p>
<ul>
<li>实现插入操作以将字符串添加到前缀树中<ul>
<li>从根节点开始，遍历要插入的字符串的字符。</li>
<li>对于每个字符，检查它是否已经作为子节点的存在，如果不存在，则创建一个新节点并将其添加到当前节点的子节点映射或数组中。</li>
<li>移动到下一个节点，并继续这个过程，直到插入完整字符串。</li>
<li>在插入的最后一个字符节点上设置 <code>isEnd</code> 标志，表示一个完整的字符串已经插入。</li>
</ul>
</li>
</ul>
<pre><code class="golang">// 向前缀树中插入一个字符串
func (t *Trie) Insert(word string) &#123;
    node := t.root
    for _, char := range word &#123;
        if node.children[char] == nil &#123;
            node.children[char] = &amp;TrieNode&#123;
                children: make(map[rune]*TrieNode),
                isEnd: false,
            &#125;
        &#125;
        node = node.children[char]
    &#125;
    node.isEnd = true
&#125;
</code></pre>
</li>
<li><p><strong>搜索操作</strong></p>
<ul>
<li>实现搜索操作以查找前缀或整个字符串<ul>
<li>从根节点开始，遍历要搜索的字符串的字符。</li>
<li>对于每个字符，检查它是否作为子节点存在。如果存在，继续向下移动。</li>
<li>如果在搜索的过程中遇到任何字符节点不存在，或者搜索完成后发现当前节点的 <code>isEnd</code> 标志未设置，那么表示该字符串不存在于前缀树中。</li>
</ul>
</li>
</ul>
<pre><code class="golang">// 搜索前缀树以检查字符串是否存在
func (t *Trie) Search(word string) bool &#123;
    node := t.root
    for _, char := range word &#123;
        if node.children[char] == nil &#123;
            return false
        &#125;
        node = node.children[char]
    &#125;
    return node.isEnd
&#125;
</code></pre>
</li>
<li><p><strong>完整实现</strong></p>
<ul>
<li>golang 实现</li>
</ul>
<pre><code class="golang">package main
import &quot;fmt&quot;

// TrieNode 表示前缀树的节点
type TrieNode struct &#123;
    children map[rune]*TrieNode
    isEnd    bool
&#125;

// Trie 表示前缀树
type Trie struct &#123;
    root *TrieNode
&#125;

// NewTrie 创建一个新的前缀树
func NewTrie() *Trie &#123;
    return &amp;Trie&#123;
        root: &amp;TrieNode&#123;
            children: make(map[rune]*TrieNode),
            isEnd:    false,
        &#125;,
    &#125;
&#125;

// Insert 向前缀树中插入一个字符串
func (t *Trie) Insert(word string) &#123;
    node := t.root
    for _, char := range word &#123;
        if node.children[char] == nil &#123;
            node.children[char] = &amp;TrieNode&#123;
                children: make(map[rune]*TrieNode),
                isEnd:    false,
            &#125;
        &#125;
        node = node.children[char]
    &#125;
    node.isEnd = true
&#125;

// Search 搜索前缀树以检查字符串是否存在
func (t *Trie) Search(word string) bool &#123;
    node := t.root
    for _, char := range word &#123;
        if node.children[char] == nil &#123;
            return false
        &#125;
        node = node.children[char]
    &#125;
    return node.isEnd
&#125;

func main() &#123;
    trie := NewTrie()
    trie.Insert(&quot;apple&quot;)
    trie.Insert(&quot;app&quot;)
    trie.Insert(&quot;banana&quot;)

    fmt.Println(trie.Search(&quot;apple&quot;))   // true
    fmt.Println(trie.Search(&quot;app&quot;))     // true
    fmt.Println(trie.Search(&quot;banana&quot;))  // true
    fmt.Println(trie.Search(&quot;orange&quot;))  // false
    fmt.Println(trie.Search(&quot;apples&quot;))  // false
&#125;
</code></pre>
</li>
<li><p>Java 实现</p>
</li>
</ul>
<pre><code class="java">import java.util.HashMap;
import java.util.Map;

class TrieNode &#123;
  Map&lt;Character, TrieNode&gt; children;
  boolean isEnd;

  public TrieNode() &#123;
      this.children = new HashMap&lt;&gt;();
      this.isEnd = false;
  &#125;
&#125;

class Trie &#123;
  TrieNode root;

  public Trie() &#123;
      this.root = new TriredNode();
  &#125;

  public void insert(String word) &#123;
      TrieNode node = this.root;
      for (char c : word.toCharArray()) &#123;
          if (!node.children.containsKey(c)) &#123;
              node.children.put(c, new TrieNode());
          &#125;
          node = node.children.get(c);
      &#125;
      node.isEnd = true;
  &#125;

  public void search(String word) &#123;
      TrieNode node = this.root;
      for (char c : word.toCharArray()) &#123;
          if (!node.children.containsKey(c)) &#123;
              return false;
          &#125;
          node = node.children.get(c);
      &#125;
      return node.isEnd;
  &#125;
&#125;
public class Main &#123;
  public static void main(String[] args) &#123;
      Trie trie = new Trie();
      trie.insert(&quot;apple&quot;);
      trie.insert(&quot;app&quot;);
      trie.insert(&quot;banana&quot;);

      System.out.println(trie.search(&quot;apple&quot;));   // true
      System.out.println(trie.search(&quot;app&quot;));     // true
      System.out.println(trie.search(&quot;banana&quot;));  // true
      System.out.println(trie.search(&quot;orange&quot;));  // false
      System.out.println(trie.search(&quot;apples&quot;));  // false
  &#125;
&#125;
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>深入分布式</title>
    <url>/2023/09/15/%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>深入理解 golang 中的 channel</title>
    <url>/2023/10/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20golang%20%E4%B8%AD%E7%9A%84%20channel/</url>
    <content><![CDATA[<h1 id="channel-底层是怎样的"><a href="#channel-底层是怎样的" class="headerlink" title="channel 底层是怎样的"></a>channel 底层是怎样的</h1><ul>
<li><p>channel 是用来在多个 goroutine 之间传递数据的一个通道。</p>
</li>
<li><p>channel 的底层是一个 hchan 的结构体，channel 分有缓冲的 channel 和无缓冲的 channel，在创建一个有缓冲的 channel 实际上底层是依赖一个循环数组。</p>
</li>
<li><p>为什么 channel 底层要使用循环数组？</p>
<ul>
<li>高效的出队操作：循环数组允许快速出队操作，无需进行频繁的数据搬移，这降低了队列操作的时间复杂度，使得多个 goroutine 之间传递数据更加高效。</li>
<li>降低内存分配开销：循环数组在初始化时可以分配一块固定大小的内存，而不需要在每次操作时候动态分配内存，这降低了内存分配和垃圾回收的开销，有助于提高性能。</li>
<li>提高缓存局部性：循环数组中的数据项通常是紧密排列的，这有助于提高 CPU 缓存的命中率，减少内存访问的开销，从而提高效率。</li>
<li>简单实现：</li>
</ul>
<pre><code class="golang">type CircularQueue struct &#123;
    data         []interface&#123;&#125; // 数据存储数组
    size         int           // 队列容量
    front        int           // 队头索引
    rear         int           // 下一个可用位置的索引
    elementCount int           // 队列中元素个数
&#125;

func NewCircularQueue(capacity int) *CircularQueue &#123;
    return &amp;CircularQueue&#123;
        data:         make([]interface&#123;&#125;, capacity),
        size:         capacity,
        front:        0,
        rear:         0,
        elementCount: 0,
    &#125;
&#125;

func (q *CircularQueue) IsEmpty() bool &#123;
    return q.elementCount == 0
&#125;

func (q *CircularQueue) IsFull() bool &#123;
    return q.elementCount == q.size
&#125;

// Enqueue adds an element to the rear of the circular queue.
func (q *CircularQueue) Enqueue(value interface&#123;&#125;) &#123;
    if q.IsFull() &#123;
        q.Dequeue()
    &#125;
    q.data[q.rear] = value
    q.rear = (q.rear + 1) % q.size
    q.elementCount++
&#125;

// Dequeue removes an element from the front of the circular queue.
func (q *CircularQueue) Dequeue() (interface&#123;&#125;, error) &#123;
    if q.IsEmpty() &#123;
        return nil, errors.New(&quot;queue is empty&quot;)
    &#125;
    value := q.data[q.front]
    q.front = (q.front + 1) % q.size
    q.elementCount--
    return value, nil
&#125;

// Peek returns the element at the front of the circular queue without removing it.
func (q *CircularQueue) Peek() (interface&#123;&#125;, error) &#123;
    if q.IsEmpty() &#123;
        return nil, errors.New(&quot;queue is empty&quot;)
    &#125;
    return q.data[q.front], nil
&#125;

func (q *CircularQueue) Size() int &#123;
    return q.elementCount
&#125;

func main() &#123;
    queue := NewCircularQueue(5)

    queue.Enqueue(1)
    queue.Enqueue(2)
    queue.Enqueue(3)
    queue.Enqueue(4)
    queue.Enqueue(5)

    frontValue, _ := queue.Peek()
    fmt.Println(&quot;Front element: &quot;, frontValue)

    // dequeuedValue, _ := queue.Dequeue()
    // fmt.Println(&quot;Dequeued element: &quot;, dequeuedValue)

    queue.Enqueue(6)

    fmt.Println(&quot;Queue size:&quot;, queue.Size())

    fmt.Println(queue.data[0])
    // for !queue.IsEmpty() &#123;
    // 	value, _ := queue.Dequeue()
    // 	fmt.Println(&quot;Dequeue element: &quot;, value)
    // &#125;
&#125;
</code></pre>
</li>
</ul>
<ul>
<li>channel 的结构是怎样的呢？</li>
</ul>
<pre><code class="golang">/*

*_type 不是一个单独的类型 ，而是一种表示类型的内部结构体
这个结构体包含有关 go 语言中类型的元信息，例如类型的名称、
大小、对齐方式等，这个结构体在 go 语言的运行时系统中使用，
用于描述类型信息。
*/

type hchan struct &#123;
    qcount   uint           // 循环数组中的元素数量
    dataqsiz uint           // 循环数组的长度
    buf      unsafe.Pointer // 指向底层数组的指针
    elemsize uint16         // 能够收发元素的大小

    closed   uint32 // channel 是否关闭的标志
    elemtype *_type // channel 中的元素类型

    sendx uint // 下一次发送数据的下标位置
    recvx uint // 下一次读取数据的下标位置

    recvq waiq // 读等待队列
    sendq waiq // 写等待队列

    lock mutex // 互斥锁
&#125;
</code></pre>
<h1 id="hchan-中的各部分是如何在我们使用-channel-的时候起作用的呢？"><a href="#hchan-中的各部分是如何在我们使用-channel-的时候起作用的呢？" class="headerlink" title="hchan 中的各部分是如何在我们使用 channel 的时候起作用的呢？"></a>hchan 中的各部分是如何在我们使用 channel 的时候起作用的呢？</h1><h2 id="创建一个-channel"><a href="#创建一个-channel" class="headerlink" title="创建一个 channel"></a>创建一个 channel</h2><ul>
<li><code>ch := make(chan int, 3)</code>，这个实际上是在内存中实例化了一个 hchan 的结构体，并返回一个 ch 的指针</li>
</ul>
<h2 id="channel-的写入和读取"><a href="#channel-的写入和读取" class="headerlink" title="channel 的写入和读取"></a>channel 的写入和读取</h2><ul>
<li>首先当使用 ch &lt;- xxx 或者 tmp :&#x3D; &lt;- ch 的时候，通常会先锁住 hchan 这个结构体（后面会讲到什么时候，写入数据不会加锁）。</li>
</ul>
<h3 id="写入和读取的细化操作"><a href="#写入和读取的细化操作" class="headerlink" title="写入和读取的细化操作"></a>写入和读取的细化操作</h3><ul>
<li>当我开始向 channel 中写入或读取数据，就是将数据从 goroutine 中 copy 到队列中（写入）或者将数据从队列 copy 到 goroutine 当中。</li>
</ul>
<h3 id="如果-channel-的缓冲满了，底层是如何处理的"><a href="#如果-channel-的缓冲满了，底层是如何处理的" class="headerlink" title="如果 channel 的缓冲满了，底层是如何处理的"></a>如果 channel 的缓冲满了，底层是如何处理的</h3><ul>
<li>如果 channel 的缓冲满了，直观情况就是会阻塞在这里。我们需要先学习一下<a href="https://brumbyhhh.github.io/2023/09/15/%E6%B7%B1%E5%85%A5%E5%88%86%E5%B8%83%E5%BC%8F-md/" style="color: #B0D468;">Go 的调度原理</a></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解分布式锁</title>
    <url>/2023/09/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>深度剖析 Zookeeper</title>
    <url>/2023/09/15/%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90-Zookeeper/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
